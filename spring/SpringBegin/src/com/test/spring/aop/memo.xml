<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 주 업무 객체 -->
	<bean id="memo" class="com.test.spring.aop.Memo"></bean>
	
	<!-- 보조 업무 객체 -->
	<bean id="auth" class="com.test.spring.aop.Auth"></bean>
	<bean id="logger" class="com.test.spring.aop.Logger"></bean>
	
	<!-- AOP 설정 : 주 업무와 보조 업무의 관계를 맺어주는 역할 -->
	<aop:config>
		
		<!-- 해당 객체를 보조 업무 객체 역할을 부여합니다.(*****) -->
		<aop:aspect id="authAdvice" ref="auth">
		
			<!-- 해당 보조 업무와 주 업무의 관계 정의 -->
			<!--
				주 업무를 지정한다.
				- 어떤 주 업무 객체의 어떤 메서드(*****)를 주 업무로 관계를 맺을지 검색
				- AspectJ 표현식을 사용한다. -> 특정 클래스의 특정 메서드를 찾을 수 있다. -> Point Cut
				
				execution(public void com.test.spring.aop.Memo.edit(String))	
			-->
			
			<!-- 주 업무 메서드 찾기 -->
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.edit(String))" id="edit"/>
			
			<!-- 관계 적용 -->
			<!-- <aop:before method="check" pointcut-ref="edit" /> -->
			
			<!--
			<aop:after method="doSomething" pointcut-ref="edit" />
			<aop:before method="doSomething" pointcut-ref="edit" />
			-->
			
			<!--
			동일한 표현식의 포인트 컷을 여러개 생성이 가능하다. 그러나 비효율적인 행동이다.
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.edit(String))" id="edit2"/>
			<aop:after method="doSomething" pointcut-ref="edit2" />
			-->
			
			<!--
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.edit(String)) || execution(public void com.test.spring.aop.Memo.add(String))" id="p1"/>
			<aop:before method="doSomething" pointcut-ref="p1" />
			-->
			
			<!-- <aop:pointcut expression="execution(public void com.test.spring.aop.Memo.*(String))" id="p2"/> -->
			<!-- <aop:pointcut expression="execution(public void com.test.spring.aop.Memo.*(int))" id="p2"/> -->
			<!-- <aop:pointcut expression="execution(public * com.test.spring.aop.Memo.*(String))" id="p2"/> -->
			<!-- <aop:pointcut expression="execution(public * com.test.spring.aop.Memo.*(..))" id="p2"/> -->
			
			<!-- <aop:after method="doSomething" pointcut-ref="p2" /> -->
			
			
		</aop:aspect>
		
		<aop:aspect id="loggerAdvice" ref="logger">
		
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.add(String))" id="add"/>
			
			<!-- <aop:after method="logTime" pointcut-ref="add" /> -->
			<aop:around method="executeTime" pointcut-ref="add"/>
			
			<aop:pointcut expression="execution(public int com.test.spring.aop.Memo.search(String))" id="search"/>
			<aop:after-returning method="logSearch" pointcut-ref="search" returning="obj"/>
			
			<aop:pointcut expression="execution(public void com.test.spring.aop.Memo.read(int))" id="read"/>
			<aop:after-throwing method="notfound" pointcut-ref="read" throwing="e"/>
					
		</aop:aspect>
		
	</aop:config>
	

</beans>